generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model - supports both password and magic link auth
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  name          String
  password      String?   // Optional - null for magic link only users
  image         String?
  emailVerified DateTime? // Track if email is verified
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  tracks      Track[]
  stemGroups  StemGroup[]
  magicLinks  MagicLink[]
  sessions    Session[]
}

// Magic link tokens for passwordless auth
model MagicLink {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String?
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
}

// Session management for logged-in users
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

// soundshare core models
model Track {
  id          String   @id @default(cuid())
  userId      String
  title       String
  filename    String
  filePath    String   // Local path for now, will be R2 URL later
  waveformData String?  // JSON string of waveform data
  duration    Int      // seconds
  fileSize    Int      // bytes
  format      String   // "MP3", "WAV", "WEBM", etc
  bpm         Int?
  key         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

// Multi-stem group model
model StemGroup {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  stems Stem[]

  @@index([userId])
  @@index([createdAt])
}

// Individual stem within a group
model Stem {
  id           String   @id @default(cuid())
  stemGroupId  String
  stemType     String   // "drums", "bass", "melody", "vocals", "other"
  title        String
  filename     String
  filePath     String
  duration     Int      // seconds
  fileSize     Int      // bytes
  format       String
  order        Int      // Display order (0, 1, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  stemGroup StemGroup @relation(fields: [stemGroupId], references: [id], onDelete: Cascade)

  @@index([stemGroupId])
}
